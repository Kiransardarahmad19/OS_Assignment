#include <iostream> 
#include <pthread.h> 
#include <time.h>     
#define MAX  12    
#define THREAD_MAX 2  
using namespace std;   
int a[maximum]; int part = 0;  
void mergesortcode(int low, int mid, int high) 
{ 	
int* left = new int[mid - low + 1]; 	
int* right = new int[high - mid];  	
int n1 = mid - low + 1, n2 = high - mid, i, j;  
i=0;
while (i < n1) 		
left[i] = a[i + low];  
i++;
i=0;
while ( i < n2) 		
right[i] = a[i + mid + 1];  
i++;
int k = low; 	
i = j = 0;   	
while (i < n1 && j < n2) 
{ 		
if (left[i] <= right[j]) 			
a[k++] = left[i++]; 		
else 			
a[k++] = right[j++]; 	
}  	
while (i < n1) 
{ 		
a[k++] = left[i++]; 	
}  		
while (j < n2) 
{
a[k++] = right[j++]; 	
} 
 }  
 void mergesortcode(int low, int high) 
 { 	
 int mid = low + (high - low) / 2;
  	if (low < high) 
  	{  			
  	mergesortcode(low, mid);  			
  	mergesortcode(mid + 1, high);  		
        merge(low, mid, high); 	
        } 
        }  
        void* mergesortcode(void* arg) 
        { 	 	
        int thread_part = part++;  	 	
        int low = thread_part * (MAX / 4); 	
        int high = (thread_part + 1) * (MAX / 4) - 1;  
        int mid = low + (high - low) / 2;
        if (low < high) 
        { 
        mergesortcode(low, mid); 	
        mergesortcode(mid + 1, high);merge(low, mid, high);
         }
          }  
          int main() 
          { 	
          for (int i = 0; i < MAX; i++) 		
          a[i] = rand() % 100;  	
          clock_t t1, t2;  	
          t1 = clock(); 	
          pthread_t threads[THREAD_max];  	
          for (int i = 0; i < THREAD_max; i++) 		
          pthread_create(&threads[i], NULL, mergesortcode,(void*)NULL);  	
          
          for (int i = 0; i < 4; i++) 		
          pthread_join(threads[i], NULL);  	
          merge(0, (MAX/ 2 - 1) / 2,MAX / 2 - 1); 	
          merge(MAX / 2, MAX/2 + (MAX-1-MAX/2)/2, MAX - 1); 	
          merge(0, (MAX - 1)/2,MAX - 1);  	
          t2 = clock();  	
          cout << "The sorted array: "; 	
          for (int i = 0; i < MAX; i++) 		
          cout << a[i] << " ";  	
          cout << "\n The Time Taken: " << (t2 - t1) /(double)CLOCKS_PER_SEC << endl;  	
          return 0; 
          }
